/*\
 * Copyright (c) 2021 Sze Howe Koh
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
\*/

#ifndef LQLIBINTERFACE_H
#define LQLIBINTERFACE_H

#include <QtCore>
#include <QtGlobal>
#include "extcode.h"
#include "lqtypes.h"

// NOTE: This file contains auto-generated code. Do not modify by hand.

extern "C" {

extern qint32 Q_DECL_EXPORT QTextCodec_codecForLocale(quintptr* _retVal);
extern qint32 Q_DECL_EXPORT QTextCodec_codecForMib(quintptr* _retVal, qint32 mib);
extern qint32 Q_DECL_EXPORT QTextCodec_availableCodecs(LVArray<LStrHandle>** _retVal);
extern qint32 Q_DECL_EXPORT QTextCodec_availableMibs(LVArray<qint32>** _retVal);
extern qint32 Q_DECL_EXPORT QTextCodec_codecForName(quintptr* _retVal, LStrHandle name);
extern qint32 Q_DECL_EXPORT QTextCodec_fromUnicode(LStrHandle _retVal, quintptr _instance, LStrHandle string);
extern qint32 Q_DECL_EXPORT QTextCodec_name(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QTextCodec_toUnicode(LStrHandle _retVal, quintptr _instance, LStrHandle string);
extern qint32 Q_DECL_EXPORT QObject_setObjectName(quintptr _instance, LStrHandle sheet);
extern qint32 Q_DECL_EXPORT QObject_objectName(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QCoreApplication_setApplicationName(quintptr _instance, LStrHandle application);
extern qint32 Q_DECL_EXPORT QCoreApplication_applicationName(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QLocale_QLocale(LStrHandle _retVal, int32 language, int32 script, int32 country);
extern qint32 Q_DECL_EXPORT QLocale_language(int32* _retVal, LStrHandle _instance);
extern qint32 Q_DECL_EXPORT QLocale_script(int32* _retVal, LStrHandle _instance);
extern qint32 Q_DECL_EXPORT QLocale_country(int32* _retVal, LStrHandle _instance);
extern qint32 Q_DECL_EXPORT QLocale_name(LStrHandle _retVal, LStrHandle _instance);
extern qint32 Q_DECL_EXPORT QLocale_bcp47Name(LStrHandle _retVal, LStrHandle _instance);
extern qint32 Q_DECL_EXPORT QLocale_nativeLanguageName(LStrHandle _retVal, LStrHandle _instance);
extern qint32 Q_DECL_EXPORT QLocale_nativeCountryName(LStrHandle _retVal, LStrHandle _instance);
extern qint32 Q_DECL_EXPORT QLocale_measurementSystem(int32* _retVal, LStrHandle _instance);
extern qint32 Q_DECL_EXPORT QLocale_textDirection(int32* _retVal, LStrHandle _instance);
extern qint32 Q_DECL_EXPORT QLocale_setDefault(LStrHandle locale);
extern qint32 Q_DECL_EXPORT QLocale_system(LStrHandle _retVal);
extern qint32 Q_DECL_EXPORT QLocale_matchingLocales(LVArray<LStrHandle>** _retVal, int32 language, int32 script, int32 country);
extern qint32 Q_DECL_EXPORT QLocale_setNumberOptions(LStrHandle _instance, int32 options);
extern qint32 Q_DECL_EXPORT QLocale_numberOptions(int32* _retVal, LStrHandle _instance);
extern qint32 Q_DECL_EXPORT QGuiApplication_setWindowIcon(quintptr _instance, LStrHandle icon);
extern qint32 Q_DECL_EXPORT QGuiApplication_windowIcon(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QGuiApplication_primaryScreen(quintptr* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QGuiApplication_screens(LVArray<quintptr>** _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QGuiApplication_setLayoutDirection(quintptr _instance, int32 direction);
extern qint32 Q_DECL_EXPORT QGuiApplication_layoutDirection(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QGuiApplication_applicationState(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QScreen_name(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QScreen_depth(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QScreen_geometry(QRect* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QScreen_physicalDotsPerInch(double* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QScreen_logicalDotsPerInch(double* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QScreen_devicePixelRatio(double* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QScreen_availableGeometry(QRect* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QScreen_grabWindow(LStrHandle _retVal, quintptr _instance, quintptr window, qint32 x, qint32 y, qint32 w, qint32 h);
extern qint32 Q_DECL_EXPORT QScreen_refreshRate(double* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWindow_QWindow(quintptr* _retVal, const char* _className, quintptr screen);
extern qint32 Q_DECL_EXPORT QWindow_isVisible(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWindow_visibility(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWindow_setVisibility(quintptr _instance, int32 v);
extern qint32 Q_DECL_EXPORT QWindow_winId(quintptr* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWindow_isTopLevel(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWindow_modality(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWindow_setModality(quintptr _instance, int32 modality);
extern qint32 Q_DECL_EXPORT QWindow_type(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWindow_title(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWindow_setOpacity(quintptr _instance, double level);
extern qint32 Q_DECL_EXPORT QWindow_opacity(double* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWindow_isActive(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWindow_devicePixelRatio(double* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWindow_windowState(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWindow_setWindowState(quintptr _instance, int32 state);
extern qint32 Q_DECL_EXPORT QWindow_setTransientParent(quintptr _instance, quintptr parent);
extern qint32 Q_DECL_EXPORT QWindow_transientParent(quintptr* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWindow_isExposed(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWindow_minimumSize(QSize* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWindow_maximumSize(QSize* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWindow_baseSize(QSize* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWindow_sizeIncrement(QSize* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWindow_setMinimumSize(quintptr _instance, QSize* size);
extern qint32 Q_DECL_EXPORT QWindow_setMaximumSize(quintptr _instance, QSize* size);
extern qint32 Q_DECL_EXPORT QWindow_setBaseSize(quintptr _instance, QSize* size);
extern qint32 Q_DECL_EXPORT QWindow_setSizeIncrement(quintptr _instance, QSize* size);
extern qint32 Q_DECL_EXPORT QWindow_setGeometry(quintptr _instance, QRect* rect);
extern qint32 Q_DECL_EXPORT QWindow_geometry(QRect* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWindow_frameGeometry(QRect* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWindow_size(QSize* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWindow_resize(quintptr _instance, QSize* newSize);
extern qint32 Q_DECL_EXPORT QWindow_setIcon(quintptr _instance, LStrHandle icon);
extern qint32 Q_DECL_EXPORT QWindow_icon(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWindow_setKeyboardGrabEnabled(bool* _retVal, quintptr _instance, bool* grab);
extern qint32 Q_DECL_EXPORT QWindow_setMouseGrabEnabled(bool* _retVal, quintptr _instance, bool* grab);
extern qint32 Q_DECL_EXPORT QWindow_screen(quintptr* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWindow_setScreen(quintptr _instance, quintptr screen);
extern qint32 Q_DECL_EXPORT QWindow_focusObject(quintptr* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWindow_fromWinId(quintptr* _retVal, quintptr id);
extern qint32 Q_DECL_EXPORT QWindow_requestActivate(quintptr _instance);
extern qint32 Q_DECL_EXPORT QWindow_setVisible(quintptr _instance, bool* visible);
extern qint32 Q_DECL_EXPORT QWindow_show(quintptr _instance);
extern qint32 Q_DECL_EXPORT QWindow_hide(quintptr _instance);
extern qint32 Q_DECL_EXPORT QWindow_showMinimized(quintptr _instance);
extern qint32 Q_DECL_EXPORT QWindow_showMaximized(quintptr _instance);
extern qint32 Q_DECL_EXPORT QWindow_showFullScreen(quintptr _instance);
extern qint32 Q_DECL_EXPORT QWindow_showNormal(quintptr _instance);
extern qint32 Q_DECL_EXPORT QWindow_close(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWindow_raise(quintptr _instance);
extern qint32 Q_DECL_EXPORT QWindow_lower(quintptr _instance);
extern qint32 Q_DECL_EXPORT QWindow_setTitle(quintptr _instance, LStrHandle title);
extern qint32 Q_DECL_EXPORT QWindow_alert(quintptr _instance, qint32 msec);
extern qint32 Q_DECL_EXPORT QBrush_QBrush(LStrHandle _retVal, quint32 color, int32 brushStyle);
extern qint32 Q_DECL_EXPORT QBrush_color(LStrHandle _retVal, LStrHandle _instance);
extern qint32 Q_DECL_EXPORT QBrush_setColor(LStrHandle _instance, LStrHandle color);
extern qint32 Q_DECL_EXPORT QBrush_setStyle(LStrHandle _instance, int32 style);
extern qint32 Q_DECL_EXPORT QBrush_style(int32* _retVal, LStrHandle _instance);
extern qint32 Q_DECL_EXPORT QBrush_texture(LStrHandle _retVal, LStrHandle _instance);
extern qint32 Q_DECL_EXPORT QBrush_setTexture(LStrHandle _instance, LStrHandle pixmap);
extern qint32 Q_DECL_EXPORT QColor_QColor(LStrHandle _retVal, quint32 rgb);
extern qint32 Q_DECL_EXPORT QColor_alpha(quint8* _retVal, LStrHandle _instance);
extern qint32 Q_DECL_EXPORT QColor_setAlpha(LStrHandle _instance, quint8 alpha);
extern qint32 Q_DECL_EXPORT QColor_rgb(quint32* _retVal, LStrHandle _instance);
extern qint32 Q_DECL_EXPORT QFont_QFont(LStrHandle _retVal, LStrHandle family, qint32 pointSize, qint32 weight, bool* italic);
extern qint32 Q_DECL_EXPORT QFont_family(LStrHandle _retVal, LStrHandle _instance);
extern qint32 Q_DECL_EXPORT QFont_styleName(LStrHandle _retVal, LStrHandle _instance);
extern qint32 Q_DECL_EXPORT QFont_pointSize(qint32* _retVal, LStrHandle _instance);
extern qint32 Q_DECL_EXPORT QFont_pointSizeF(double* _retVal, LStrHandle _instance);
extern qint32 Q_DECL_EXPORT QFont_pixelSize(qint32* _retVal, LStrHandle _instance);
extern qint32 Q_DECL_EXPORT QFont_weight(qint32* _retVal, LStrHandle _instance);
extern qint32 Q_DECL_EXPORT QFont_bold(bool* _retVal, LStrHandle _instance);
extern qint32 Q_DECL_EXPORT QFont_setStyle(LStrHandle _instance, int32 style);
extern qint32 Q_DECL_EXPORT QFont_style(int32* _retVal, LStrHandle _instance);
extern qint32 Q_DECL_EXPORT QFont_italic(bool* _retVal, LStrHandle _instance);
extern qint32 Q_DECL_EXPORT QFont_setItalic(LStrHandle _instance, bool* b);
extern qint32 Q_DECL_EXPORT QFont_underline(bool* _retVal, LStrHandle _instance);
extern qint32 Q_DECL_EXPORT QFont_overline(bool* _retVal, LStrHandle _instance);
extern qint32 Q_DECL_EXPORT QFont_strikeOut(bool* _retVal, LStrHandle _instance);
extern qint32 Q_DECL_EXPORT QFont_fixedPitch(bool* _retVal, LStrHandle _instance);
extern qint32 Q_DECL_EXPORT QFont_kerning(bool* _retVal, LStrHandle _instance);
extern qint32 Q_DECL_EXPORT QFont_styleHint(int32* _retVal, LStrHandle _instance);
extern qint32 Q_DECL_EXPORT QFont_styleStrategy(int32* _retVal, LStrHandle _instance);
extern qint32 Q_DECL_EXPORT QFont_setStyleStrategy(LStrHandle _instance, int32 s);
extern qint32 Q_DECL_EXPORT QFont_stretch(qint32* _retVal, LStrHandle _instance);
extern qint32 Q_DECL_EXPORT QFont_letterSpacing(double* _retVal, LStrHandle _instance);
extern qint32 Q_DECL_EXPORT QFont_letterSpacingType(int32* _retVal, LStrHandle _instance);
extern qint32 Q_DECL_EXPORT QFont_setLetterSpacing(LStrHandle _instance, int32 type, double spacing);
extern qint32 Q_DECL_EXPORT QFont_wordSpacing(double* _retVal, LStrHandle _instance);
extern qint32 Q_DECL_EXPORT QFont_setWordSpacing(LStrHandle _instance, double spacing);
extern qint32 Q_DECL_EXPORT QFont_capitalization(int32* _retVal, LStrHandle _instance);
extern qint32 Q_DECL_EXPORT QFont_setHintingPreference(LStrHandle _instance, int32 hintingPreference);
extern qint32 Q_DECL_EXPORT QFont_hintingPreference(int32* _retVal, LStrHandle _instance);
extern qint32 Q_DECL_EXPORT QFont_exactMatch(bool* _retVal, LStrHandle _instance);
extern qint32 Q_DECL_EXPORT QFont_key(LStrHandle _retVal, LStrHandle _instance);
extern qint32 Q_DECL_EXPORT QFont_toString(LStrHandle _retVal, LStrHandle _instance);
extern qint32 Q_DECL_EXPORT QFont_defaultFamily(LStrHandle _retVal, LStrHandle _instance);
extern qint32 Q_DECL_EXPORT QFont_lastResortFamily(LStrHandle _retVal, LStrHandle _instance);
extern qint32 Q_DECL_EXPORT QFont_lastResortFont(LStrHandle _retVal, LStrHandle _instance);
extern qint32 Q_DECL_EXPORT QIcon_QIcon(LStrHandle _retVal, LStrHandle fileName);
extern qint32 Q_DECL_EXPORT QIcon_addFile(LStrHandle _instance, LStrHandle file, QSize* size, int32 mode, int32 state);
extern qint32 Q_DECL_EXPORT QIcon_addPixmap(LStrHandle _instance, LStrHandle pixmap, int32 mode, int32 state);
extern qint32 Q_DECL_EXPORT QIcon_pixmap(LStrHandle _retVal, LStrHandle _instance, QSize* size, int32 mode, int32 state);
extern qint32 Q_DECL_EXPORT QPalette_QPalette(LStrHandle _retVal, quint32 button);
extern qint32 Q_DECL_EXPORT QPalette_brush(LStrHandle _retVal, LStrHandle _instance, int32 colorGroup, int32 colorRole);
extern qint32 Q_DECL_EXPORT QPalette_setBrush(LStrHandle _instance, int32 colorGroup, int32 colorRole, LStrHandle brush);
extern qint32 Q_DECL_EXPORT QPalette_isBrushSet(bool* _retVal, LStrHandle _instance, int32 colorGroup, int32 colorRole);
extern qint32 Q_DECL_EXPORT QPen_QPen(LStrHandle _retVal, quint32 brush, double width, int32 style, int32 capStyle, int32 joinStyle);
extern qint32 Q_DECL_EXPORT QPen_dashOffset(double* _retVal, LStrHandle _instance);
extern qint32 Q_DECL_EXPORT QPen_style(int32* _retVal, LStrHandle _instance);
extern qint32 Q_DECL_EXPORT QPen_setStyle(LStrHandle _instance, int32 style);
extern qint32 Q_DECL_EXPORT QPen_dashPattern(LVArray<double>** _retVal, LStrHandle _instance);
extern qint32 Q_DECL_EXPORT QPen_setDashPattern(LStrHandle _instance, LVArray<double>** pattern);
extern qint32 Q_DECL_EXPORT QPen_setDashOffset(LStrHandle _instance, double offset);
extern qint32 Q_DECL_EXPORT QPen_miterLimit(double* _retVal, LStrHandle _instance);
extern qint32 Q_DECL_EXPORT QPen_setMiterLimit(LStrHandle _instance, double limit);
extern qint32 Q_DECL_EXPORT QPen_widthF(double* _retVal, LStrHandle _instance);
extern qint32 Q_DECL_EXPORT QPen_setWidthF(LStrHandle _instance, double width);
extern qint32 Q_DECL_EXPORT QPen_color(LStrHandle _retVal, LStrHandle _instance);
extern qint32 Q_DECL_EXPORT QPen_setColor(LStrHandle _instance, LStrHandle color);
extern qint32 Q_DECL_EXPORT QPen_brush(LStrHandle _retVal, LStrHandle _instance);
extern qint32 Q_DECL_EXPORT QPen_setBrush(LStrHandle _instance, LStrHandle brush);
extern qint32 Q_DECL_EXPORT QPen_capStyle(int32* _retVal, LStrHandle _instance);
extern qint32 Q_DECL_EXPORT QPen_setCapStyle(LStrHandle _instance, int32 capStyle);
extern qint32 Q_DECL_EXPORT QPen_joinStyle(int32* _retVal, LStrHandle _instance);
extern qint32 Q_DECL_EXPORT QPen_setJoinStyle(LStrHandle _instance, int32 joinStyle);
extern qint32 Q_DECL_EXPORT QPen_isCosmetic(bool* _retVal, LStrHandle _instance);
extern qint32 Q_DECL_EXPORT QPen_setCosmetic(LStrHandle _instance, bool* cosmetic);
extern qint32 Q_DECL_EXPORT QPixmap_QPixmap(LStrHandle _retVal, LStrHandle fileName);
extern qint32 Q_DECL_EXPORT QPixmap_size(QSize* _retVal, LStrHandle _instance);
extern qint32 Q_DECL_EXPORT QApplication_font(LStrHandle _retVal, quintptr _instance, const char* className);
extern qint32 Q_DECL_EXPORT QApplication_setFont(quintptr _instance, LStrHandle font, const char* className);
extern qint32 Q_DECL_EXPORT QApplication_palette(LStrHandle _retVal, quintptr _instance, const char* className);
extern qint32 Q_DECL_EXPORT QApplication_setPalette(quintptr _instance, LStrHandle palette, const char* className);
extern qint32 Q_DECL_EXPORT QApplication_setStyleSheet(quintptr _instance, LStrHandle sheet);
extern qint32 Q_DECL_EXPORT QApplication_styleSheet(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWidget_QWidget(quintptr* _retVal, const char* _className, quintptr parent);
extern qint32 Q_DECL_EXPORT QWidget_actions(LVArray<quintptr>** _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWidget_addActions(quintptr _instance, LVArray<quintptr>** actions);
extern qint32 Q_DECL_EXPORT QWidget_autoFillBackground(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWidget_contextMenuPolicy(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWidget_focusPolicy(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWidget_font(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWidget_geometry(QRect* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWidget_layout(quintptr* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWidget_insertActions(quintptr _instance, quintptr before, LVArray<quintptr>** actions);
extern qint32 Q_DECL_EXPORT QWidget_isEnabled(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWidget_isVisible(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWidget_locale(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWidget_minimumSize(QSize* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWidget_palette(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWidget_resize(quintptr _instance, QSize* size);
extern qint32 Q_DECL_EXPORT QWidget_setAutoFillBackground(quintptr _instance, bool* enabled);
extern qint32 Q_DECL_EXPORT QWidget_setContextMenuPolicy(quintptr _instance, int32 policy);
extern qint32 Q_DECL_EXPORT QWidget_setEnabled(quintptr _instance, bool* enabled);
extern qint32 Q_DECL_EXPORT QWidget_setFocusPolicy(quintptr _instance, int32 policy);
extern qint32 Q_DECL_EXPORT QWidget_setFont(quintptr _instance, LStrHandle font);
extern qint32 Q_DECL_EXPORT QWidget_setGeometry(quintptr _instance, QRect* geometry);
extern qint32 Q_DECL_EXPORT QWidget_setLayout(quintptr _instance, quintptr layout);
extern qint32 Q_DECL_EXPORT QWidget_setLocale(quintptr _instance, LStrHandle locale);
extern qint32 Q_DECL_EXPORT QWidget_setMinimumSize(quintptr _instance, QSize* size);
extern qint32 Q_DECL_EXPORT QWidget_setPalette(quintptr _instance, LStrHandle palette);
extern qint32 Q_DECL_EXPORT QWidget_setStyleSheet(quintptr _instance, LStrHandle styleSheet);
extern qint32 Q_DECL_EXPORT QWidget_setTabOrder(quintptr first, quintptr second);
extern qint32 Q_DECL_EXPORT QWidget_setToolTip(quintptr _instance, LStrHandle toolTip);
extern qint32 Q_DECL_EXPORT QWidget_setToolTipDuration(quintptr _instance, qint32 msec);
extern qint32 Q_DECL_EXPORT QWidget_setVisible(quintptr _instance, bool* visible);
extern qint32 Q_DECL_EXPORT QWidget_setWindowIcon(quintptr _instance, LStrHandle icon);
extern qint32 Q_DECL_EXPORT QWidget_setWindowState(quintptr _instance, int32 windowState);
extern qint32 Q_DECL_EXPORT QWidget_setWindowOpacity(quintptr _instance, double level);
extern qint32 Q_DECL_EXPORT QWidget_setWindowTitle(quintptr _instance, LStrHandle windowTitle);
extern qint32 Q_DECL_EXPORT QWidget_size(QSize* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWidget_sizeHint(QSize* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWidget_styleSheet(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWidget_toolTip(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWidget_toolTipDuration(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWidget_windowHandle(quintptr* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWidget_windowIcon(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWidget_windowOpacity(double* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWidget_windowState(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWidget_windowTitle(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QComboBox_QComboBox(quintptr* _retVal, const char* _className, quintptr parent);
extern qint32 Q_DECL_EXPORT QComboBox_maxVisibleItems(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QComboBox_setMaxVisibleItems(quintptr _instance, qint32 maxItems);
extern qint32 Q_DECL_EXPORT QComboBox_count(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QComboBox_setMaxCount(quintptr _instance, qint32 max);
extern qint32 Q_DECL_EXPORT QComboBox_maxCount(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QComboBox_duplicatesEnabled(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QComboBox_setDuplicatesEnabled(quintptr _instance, bool* enable);
extern qint32 Q_DECL_EXPORT QComboBox_setFrame(quintptr _instance, bool* hasFrame);
extern qint32 Q_DECL_EXPORT QComboBox_hasFrame(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QComboBox_findText(qint32* _retVal, quintptr _instance, LStrHandle text, int32 flags);
extern qint32 Q_DECL_EXPORT QComboBox_insertPolicy(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QComboBox_setInsertPolicy(quintptr _instance, int32 policy);
extern qint32 Q_DECL_EXPORT QComboBox_sizeAdjustPolicy(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QComboBox_setSizeAdjustPolicy(quintptr _instance, int32 policy);
extern qint32 Q_DECL_EXPORT QComboBox_minimumContentsLength(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QComboBox_setMinimumContentsLength(quintptr _instance, qint32 characters);
extern qint32 Q_DECL_EXPORT QComboBox_iconSize(QSize* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QComboBox_setIconSize(quintptr _instance, QSize* size);
extern qint32 Q_DECL_EXPORT QComboBox_isEditable(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QComboBox_setEditable(quintptr _instance, bool* editable);
extern qint32 Q_DECL_EXPORT QComboBox_currentIndex(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QComboBox_currentText(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QComboBox_itemText(LStrHandle _retVal, quintptr _instance, qint32 index);
extern qint32 Q_DECL_EXPORT QComboBox_itemIcon(LStrHandle _retVal, quintptr _instance, qint32 index);
extern qint32 Q_DECL_EXPORT QComboBox_addItems(quintptr _instance, LVArray<LStrHandle>** texts);
extern qint32 Q_DECL_EXPORT QComboBox_insertItems(quintptr _instance, qint32 index, LVArray<LStrHandle>** texts);
extern qint32 Q_DECL_EXPORT QComboBox_insertSeparator(quintptr _instance, qint32 index);
extern qint32 Q_DECL_EXPORT QComboBox_removeItem(quintptr _instance, qint32 index);
extern qint32 Q_DECL_EXPORT QComboBox_setItemText(quintptr _instance, qint32 index, LStrHandle text);
extern qint32 Q_DECL_EXPORT QComboBox_setItemIcon(quintptr _instance, qint32 index, LStrHandle icon);
extern qint32 Q_DECL_EXPORT QComboBox_showPopup(quintptr _instance);
extern qint32 Q_DECL_EXPORT QComboBox_hidePopup(quintptr _instance);
extern qint32 Q_DECL_EXPORT QComboBox_clear(quintptr _instance);
extern qint32 Q_DECL_EXPORT QComboBox_clearEditText(quintptr _instance);
extern qint32 Q_DECL_EXPORT QComboBox_setEditText(quintptr _instance, LStrHandle text);
extern qint32 Q_DECL_EXPORT QComboBox_setCurrentIndex(quintptr _instance, qint32 index);
extern qint32 Q_DECL_EXPORT QComboBox_setCurrentText(quintptr _instance, LStrHandle text);
extern qint32 Q_DECL_EXPORT QFontComboBox_QFontComboBox(quintptr* _retVal, const char* _className, quintptr parent);
extern qint32 Q_DECL_EXPORT QFontComboBox_setFontFilters(quintptr _instance, int32 filters);
extern qint32 Q_DECL_EXPORT QFontComboBox_fontFilters(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QFontComboBox_currentFont(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QFontComboBox_setCurrentFont(quintptr _instance, LStrHandle font);
extern qint32 Q_DECL_EXPORT QFrame_QFrame(quintptr* _retVal, const char* _className, quintptr parent);
extern qint32 Q_DECL_EXPORT QFrame_frameWidth(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QFrame_frameShape(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QFrame_setFrameShape(quintptr _instance, int32 shape);
extern qint32 Q_DECL_EXPORT QFrame_frameShadow(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QFrame_setFrameShadow(quintptr _instance, int32 shadow);
extern qint32 Q_DECL_EXPORT QFrame_lineWidth(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QFrame_setLineWidth(quintptr _instance, qint32 width);
extern qint32 Q_DECL_EXPORT QFrame_midLineWidth(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QFrame_setMidLineWidth(quintptr _instance, qint32 width);
extern qint32 Q_DECL_EXPORT QFrame_frameRect(QRect* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QFrame_setFrameRect(quintptr _instance, QRect* rectangle);
extern qint32 Q_DECL_EXPORT QLabel_QLabel(quintptr* _retVal, const char* _className, LStrHandle text, quintptr parent);
extern qint32 Q_DECL_EXPORT QLabel_alignment(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QLabel_setAlignment(quintptr _instance, int32 alignment);
extern qint32 Q_DECL_EXPORT QLabel_setPixmap(quintptr _instance, LStrHandle pixmap);
extern qint32 Q_DECL_EXPORT QLabel_setText(quintptr _instance, LStrHandle text);
extern qint32 Q_DECL_EXPORT QLabel_setWordWrap(quintptr _instance, bool* wordWrap);
extern qint32 Q_DECL_EXPORT QLabel_text(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QLabel_wordWrap(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QAbstractButton_icon(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QAbstractButton_iconSize(QSize* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QAbstractButton_setCheckable(quintptr _instance, bool* checkable);
extern qint32 Q_DECL_EXPORT QAbstractButton_isCheckable(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QAbstractButton_isChecked(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QAbstractButton_isDown(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QAbstractButton_setDown(quintptr _instance, bool* down);
extern qint32 Q_DECL_EXPORT QAbstractButton_setAutoExclusive(quintptr _instance, bool* autoExclusive);
extern qint32 Q_DECL_EXPORT QAbstractButton_autoExclusive(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QAbstractButton_setIconSize(quintptr _instance, QSize* size);
extern qint32 Q_DECL_EXPORT QAbstractButton_setChecked(quintptr _instance, bool* checked);
extern qint32 Q_DECL_EXPORT QAbstractButton_setIcon(quintptr _instance, LStrHandle icon);
extern qint32 Q_DECL_EXPORT QAbstractButton_setText(quintptr _instance, LStrHandle text);
extern qint32 Q_DECL_EXPORT QAbstractButton_text(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QPushButton_QPushButton(quintptr* _retVal, const char* _className, LStrHandle text, quintptr parent);
extern qint32 Q_DECL_EXPORT QPushButton_isFlat(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QPushButton_setFlat(quintptr _instance, bool* flat);
extern qint32 Q_DECL_EXPORT QLayout_parentWidget(quintptr* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QLayout_removeWidget(quintptr _instance, quintptr widget);
extern qint32 Q_DECL_EXPORT QBoxLayout_QBoxLayout(quintptr* _retVal, const char* _className, int32 direction, quintptr parent);
extern qint32 Q_DECL_EXPORT QBoxLayout_addLayout(quintptr _instance, quintptr layout, qint32 stretch);
extern qint32 Q_DECL_EXPORT QBoxLayout_addSpacing(quintptr _instance, qint32 size);
extern qint32 Q_DECL_EXPORT QBoxLayout_addStretch(quintptr _instance, qint32 stretch);
extern qint32 Q_DECL_EXPORT QBoxLayout_addStrut(quintptr _instance, qint32 size);
extern qint32 Q_DECL_EXPORT QBoxLayout_addWidget(quintptr _instance, quintptr widget, qint32 stretch);
extern qint32 Q_DECL_EXPORT QAbstractScrollArea_verticalScrollBarPolicy(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QAbstractScrollArea_setVerticalScrollBarPolicy(quintptr _instance, int32 policy);
extern qint32 Q_DECL_EXPORT QAbstractScrollArea_horizontalScrollBarPolicy(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QAbstractScrollArea_setHorizontalScrollBarPolicy(quintptr _instance, int32 policy);
extern qint32 Q_DECL_EXPORT QAbstractScrollArea_cornerWidget(quintptr* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QAbstractScrollArea_setCornerWidget(quintptr _instance, quintptr widget);
extern qint32 Q_DECL_EXPORT QAbstractScrollArea_sizeAdjustPolicy(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QAbstractScrollArea_setSizeAdjustPolicy(quintptr _instance, int32 policy);
extern qint32 Q_DECL_EXPORT QCheckBox_QCheckBox(quintptr* _retVal, const char* _className, LStrHandle text, quintptr parent);
extern qint32 Q_DECL_EXPORT QCheckBox_setTristate(quintptr _instance, bool* y);
extern qint32 Q_DECL_EXPORT QCheckBox_isTristate(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QCheckBox_checkState(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QCheckBox_setCheckState(quintptr _instance, int32 state);
extern qint32 Q_DECL_EXPORT QGroupBox_QGroupBox(quintptr* _retVal, const char* _className, LStrHandle title, quintptr parent);
extern qint32 Q_DECL_EXPORT QGroupBox_title(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QGroupBox_setTitle(quintptr _instance, LStrHandle title);
extern qint32 Q_DECL_EXPORT QGroupBox_alignment(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QGroupBox_setAlignment(quintptr _instance, int32 alignment);
extern qint32 Q_DECL_EXPORT QGroupBox_isFlat(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QGroupBox_setFlat(quintptr _instance, bool* flat);
extern qint32 Q_DECL_EXPORT QGroupBox_isCheckable(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QGroupBox_setCheckable(quintptr _instance, bool* checkable);
extern qint32 Q_DECL_EXPORT QGroupBox_isChecked(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QGroupBox_setChecked(quintptr _instance, bool* checked);
extern qint32 Q_DECL_EXPORT QSplitter_QSplitter(quintptr* _retVal, const char* _className, int32 orientation, quintptr parent);
extern qint32 Q_DECL_EXPORT QSplitter_addWidget(quintptr _instance, quintptr widget);
extern qint32 Q_DECL_EXPORT QSplitter_insertWidget(quintptr _instance, qint32 index, quintptr widget);
extern qint32 Q_DECL_EXPORT QSplitter_setOrientation(quintptr _instance, int32 orientation);
extern qint32 Q_DECL_EXPORT QSplitter_orientation(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QSplitter_setChildrenCollapsible(quintptr _instance, bool* collapsible);
extern qint32 Q_DECL_EXPORT QSplitter_childrenCollapsible(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QSplitter_setCollapsible(quintptr _instance, qint32 index, bool* collapsible);
extern qint32 Q_DECL_EXPORT QSplitter_isCollapsible(bool* _retVal, quintptr _instance, qint32 index);
extern qint32 Q_DECL_EXPORT QSplitter_setOpaqueResize(quintptr _instance, bool* opaque);
extern qint32 Q_DECL_EXPORT QSplitter_opaqueResize(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QSplitter_sizes(LVArray<qint32>** _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QSplitter_setSizes(quintptr _instance, LVArray<qint32>** list);
extern qint32 Q_DECL_EXPORT QSplitter_saveState(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QSplitter_restoreState(bool* _retVal, quintptr _instance, LStrHandle state);
extern qint32 Q_DECL_EXPORT QSplitter_handleWidth(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QSplitter_setHandleWidth(quintptr _instance, qint32 width);
extern qint32 Q_DECL_EXPORT QSplitter_indexOf(qint32* _retVal, quintptr _instance, quintptr widget);
extern qint32 Q_DECL_EXPORT QSplitter_widget(quintptr* _retVal, quintptr _instance, qint32 index);
extern qint32 Q_DECL_EXPORT QSplitter_count(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QSplitter_setStretchFactor(quintptr _instance, qint32 index, qint32 stretch);
extern qint32 Q_DECL_EXPORT QTabWidget_QTabWidget(quintptr* _retVal, const char* _className, quintptr parent);
extern qint32 Q_DECL_EXPORT QTabWidget_addTab(qint32* _retVal, quintptr _instance, quintptr widget, LStrHandle icon, LStrHandle label);
extern qint32 Q_DECL_EXPORT QTabWidget_insertTab(qint32* _retVal, quintptr _instance, qint32 index, quintptr widget, LStrHandle icon, LStrHandle label);
extern qint32 Q_DECL_EXPORT QTabWidget_removeTab(quintptr _instance, qint32 index);
extern qint32 Q_DECL_EXPORT QTabWidget_isTabEnabled(bool* _retVal, quintptr _instance, qint32 index);
extern qint32 Q_DECL_EXPORT QTabWidget_setTabEnabled(quintptr _instance, qint32 index, bool* enabled);
extern qint32 Q_DECL_EXPORT QTabWidget_tabText(LStrHandle _retVal, quintptr _instance, qint32 index);
extern qint32 Q_DECL_EXPORT QTabWidget_setTabText(quintptr _instance, qint32 index, LStrHandle text);
extern qint32 Q_DECL_EXPORT QTabWidget_tabIcon(LStrHandle _retVal, quintptr _instance, qint32 index);
extern qint32 Q_DECL_EXPORT QTabWidget_setTabIcon(quintptr _instance, qint32 index, LStrHandle icon);
extern qint32 Q_DECL_EXPORT QTabWidget_setTabToolTip(quintptr _instance, qint32 index, LStrHandle tip);
extern qint32 Q_DECL_EXPORT QTabWidget_tabToolTip(LStrHandle _retVal, quintptr _instance, qint32 index);
extern qint32 Q_DECL_EXPORT QTabWidget_setTabWhatsThis(quintptr _instance, qint32 index, LStrHandle text);
extern qint32 Q_DECL_EXPORT QTabWidget_tabWhatsThis(LStrHandle _retVal, quintptr _instance, qint32 index);
extern qint32 Q_DECL_EXPORT QTabWidget_currentIndex(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QTabWidget_currentWidget(quintptr* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QTabWidget_widget(quintptr* _retVal, quintptr _instance, qint32 index);
extern qint32 Q_DECL_EXPORT QTabWidget_indexOf(qint32* _retVal, quintptr _instance, quintptr widget);
extern qint32 Q_DECL_EXPORT QTabWidget_count(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QTabWidget_tabPosition(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QTabWidget_setTabPosition(quintptr _instance, int32 position);
extern qint32 Q_DECL_EXPORT QTabWidget_tabsClosable(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QTabWidget_setTabsClosable(quintptr _instance, bool* closable);
extern qint32 Q_DECL_EXPORT QTabWidget_isMovable(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QTabWidget_setMovable(quintptr _instance, bool* movable);
extern qint32 Q_DECL_EXPORT QTabWidget_tabShape(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QTabWidget_setTabShape(quintptr _instance, int32 shape);
extern qint32 Q_DECL_EXPORT QTabWidget_setCornerWidget(quintptr _instance, quintptr widget, int32 corner);
extern qint32 Q_DECL_EXPORT QTabWidget_cornerWidget(quintptr* _retVal, quintptr _instance, int32 corner);
extern qint32 Q_DECL_EXPORT QTabWidget_elideMode(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QTabWidget_setElideMode(quintptr _instance, int32 elideMode);
extern qint32 Q_DECL_EXPORT QTabWidget_iconSize(QSize* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QTabWidget_setIconSize(quintptr _instance, QSize* size);
extern qint32 Q_DECL_EXPORT QTabWidget_usesScrollButtons(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QTabWidget_setUsesScrollButtons(quintptr _instance, bool* useButtons);
extern qint32 Q_DECL_EXPORT QTabWidget_documentMode(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QTabWidget_setDocumentMode(quintptr _instance, bool* set);
extern qint32 Q_DECL_EXPORT QTabWidget_tabBarAutoHide(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QTabWidget_setTabBarAutoHide(quintptr _instance, bool* enabled);
extern qint32 Q_DECL_EXPORT QTabWidget_clear(quintptr _instance);
extern qint32 Q_DECL_EXPORT QTabWidget_setCurrentIndex(quintptr _instance, qint32 index);
extern qint32 Q_DECL_EXPORT QTabWidget_setCurrentWidget(quintptr _instance, quintptr widget);
extern qint32 Q_DECL_EXPORT QAction_QAction(quintptr* _retVal, const char* _className, LStrHandle icon, LStrHandle text, quintptr parent);
extern qint32 Q_DECL_EXPORT QAction_setIcon(quintptr _instance, LStrHandle icon);
extern qint32 Q_DECL_EXPORT QAction_icon(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QAction_setText(quintptr _instance, LStrHandle text);
extern qint32 Q_DECL_EXPORT QAction_text(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QAction_setIconText(quintptr _instance, LStrHandle text);
extern qint32 Q_DECL_EXPORT QAction_iconText(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QAction_setToolTip(quintptr _instance, LStrHandle tip);
extern qint32 Q_DECL_EXPORT QAction_toolTip(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QAction_setStatusTip(quintptr _instance, LStrHandle statusTip);
extern qint32 Q_DECL_EXPORT QAction_statusTip(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QAction_setWhatsThis(quintptr _instance, LStrHandle what);
extern qint32 Q_DECL_EXPORT QAction_whatsThis(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QAction_setPriority(quintptr _instance, int32 priority);
extern qint32 Q_DECL_EXPORT QAction_priority(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QAction_setSeparator(quintptr _instance, bool* isSeparator);
extern qint32 Q_DECL_EXPORT QAction_isSeparator(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QAction_setShortcutContext(quintptr _instance, int32 context);
extern qint32 Q_DECL_EXPORT QAction_shortcutContext(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QAction_setAutoRepeat(quintptr _instance, bool* autoRepeat);
extern qint32 Q_DECL_EXPORT QAction_autoRepeat(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QAction_setFont(quintptr _instance, LStrHandle font);
extern qint32 Q_DECL_EXPORT QAction_font(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QAction_setCheckable(quintptr _instance, bool* checkable);
extern qint32 Q_DECL_EXPORT QAction_isCheckable(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QAction_isChecked(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QAction_isEnabled(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QAction_isVisible(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QAction_activate(quintptr _instance, int32 event);
extern qint32 Q_DECL_EXPORT QAction_showStatusText(bool* _retVal, quintptr _instance, quintptr widget);
extern qint32 Q_DECL_EXPORT QAction_setMenuRole(quintptr _instance, int32 menuRole);
extern qint32 Q_DECL_EXPORT QAction_menuRole(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QAction_setIconVisibleInMenu(quintptr _instance, bool* visible);
extern qint32 Q_DECL_EXPORT QAction_isIconVisibleInMenu(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QAction_parentWidget(quintptr* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QAction_trigger(quintptr _instance);
extern qint32 Q_DECL_EXPORT QAction_hover(quintptr _instance);
extern qint32 Q_DECL_EXPORT QAction_setChecked(quintptr _instance, bool* checked);
extern qint32 Q_DECL_EXPORT QAction_toggle(quintptr _instance);
extern qint32 Q_DECL_EXPORT QAction_setEnabled(quintptr _instance, bool* enabled);
extern qint32 Q_DECL_EXPORT QAction_setVisible(quintptr _instance, bool* visible);
extern qint32 Q_DECL_EXPORT QScrollArea_QScrollArea(quintptr* _retVal, const char* _className, quintptr parent);
extern qint32 Q_DECL_EXPORT QScrollArea_widget(quintptr* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QScrollArea_setWidget(quintptr _instance, quintptr widget);
extern qint32 Q_DECL_EXPORT QScrollArea_takeWidget(quintptr* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QScrollArea_widgetResizable(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QScrollArea_setWidgetResizable(quintptr _instance, bool* resizable);
extern qint32 Q_DECL_EXPORT QScrollArea_alignment(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QScrollArea_setAlignment(quintptr _instance, int32 alignment);
extern qint32 Q_DECL_EXPORT QScrollArea_ensureVisible(quintptr _instance, qint32 x, qint32 y, qint32 xmargin, qint32 ymargin);
extern qint32 Q_DECL_EXPORT QScrollArea_ensureWidgetVisible(quintptr _instance, quintptr childWidget, qint32 xmargin, qint32 ymargin);
extern qint32 Q_DECL_EXPORT QDialog_QDialog(quintptr* _retVal, const char* _className, quintptr parent);
extern qint32 Q_DECL_EXPORT QDialog_result(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QDialog_setSizeGripEnabled(quintptr _instance, bool* enabled);
extern qint32 Q_DECL_EXPORT QDialog_isSizeGripEnabled(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QDialog_setModal(quintptr _instance, bool* modal);
extern qint32 Q_DECL_EXPORT QDialog_setResult(quintptr _instance, qint32 result);
extern qint32 Q_DECL_EXPORT QDialog_open(quintptr _instance);
extern qint32 Q_DECL_EXPORT QDialog_exec(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QDialog_done(quintptr _instance, qint32 result);
extern qint32 Q_DECL_EXPORT QDialog_accept(quintptr _instance);
extern qint32 Q_DECL_EXPORT QDialog_reject(quintptr _instance);
extern qint32 Q_DECL_EXPORT QFileDialog_QFileDialog(quintptr* _retVal, const char* _className, quintptr parent, LStrHandle caption, LStrHandle directory, LStrHandle filter);
extern qint32 Q_DECL_EXPORT QFileDialog_setDirectory(quintptr _instance, LStrHandle directory);
extern qint32 Q_DECL_EXPORT QFileDialog_selectFile(quintptr _instance, LStrHandle filename);
extern qint32 Q_DECL_EXPORT QFileDialog_selectedFiles(LVArray<LStrHandle>** _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QFileDialog_setNameFilterDetailsVisible(quintptr _instance, bool* enabled);
extern qint32 Q_DECL_EXPORT QFileDialog_isNameFilterDetailsVisible(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QFileDialog_setNameFilter(quintptr _instance, LStrHandle filter);
extern qint32 Q_DECL_EXPORT QFileDialog_setNameFilters(quintptr _instance, LVArray<LStrHandle>** filters);
extern qint32 Q_DECL_EXPORT QFileDialog_nameFilters(LVArray<LStrHandle>** _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QFileDialog_selectNameFilter(quintptr _instance, LStrHandle filter);
extern qint32 Q_DECL_EXPORT QFileDialog_selectedNameFilter(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QFileDialog_setMimeTypeFilters(quintptr _instance, LVArray<LStrHandle>** filters);
extern qint32 Q_DECL_EXPORT QFileDialog_mimeTypeFilters(LVArray<LStrHandle>** _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QFileDialog_selectMimeTypeFilter(quintptr _instance, LStrHandle filter);
extern qint32 Q_DECL_EXPORT QFileDialog_setViewMode(quintptr _instance, int32 mode);
extern qint32 Q_DECL_EXPORT QFileDialog_viewMode(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QFileDialog_setFileMode(quintptr _instance, int32 mode);
extern qint32 Q_DECL_EXPORT QFileDialog_fileMode(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QFileDialog_setAcceptMode(quintptr _instance, int32 mode);
extern qint32 Q_DECL_EXPORT QFileDialog_acceptMode(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QFileDialog_setReadOnly(quintptr _instance, bool* readOnly);
extern qint32 Q_DECL_EXPORT QFileDialog_isReadOnly(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QFileDialog_setResolveSymlinks(quintptr _instance, bool* remove);
extern qint32 Q_DECL_EXPORT QFileDialog_resolveSymlinks(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QFileDialog_setConfirmOverwrite(quintptr _instance, bool* confirm);
extern qint32 Q_DECL_EXPORT QFileDialog_confirmOverwrite(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QFileDialog_setDefaultSuffix(quintptr _instance, LStrHandle suffix);
extern qint32 Q_DECL_EXPORT QFileDialog_defaultSuffix(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QFileDialog_setHistory(quintptr _instance, LVArray<LStrHandle>** paths);
extern qint32 Q_DECL_EXPORT QFileDialog_history(LVArray<LStrHandle>** _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QFileDialog_setLabelText(quintptr _instance, int32 label, LStrHandle text);
extern qint32 Q_DECL_EXPORT QFileDialog_labelText(LStrHandle _retVal, quintptr _instance, int32 label);
extern qint32 Q_DECL_EXPORT QFileDialog_setOption(quintptr _instance, int32 option, bool* on);
extern qint32 Q_DECL_EXPORT QFileDialog_testOption(bool* _retVal, quintptr _instance, int32 option);
extern qint32 Q_DECL_EXPORT QFileDialog_setOptions(quintptr _instance, int32 options);
extern qint32 Q_DECL_EXPORT QFileDialog_options(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QFileDialog_getOpenFileName(LStrHandle _retVal, quintptr parent, LStrHandle caption, LStrHandle dir, LStrHandle filter);
extern qint32 Q_DECL_EXPORT QFileDialog_getSaveFileName(LStrHandle _retVal, quintptr parent, LStrHandle caption, LStrHandle dir, LStrHandle filter);
extern qint32 Q_DECL_EXPORT QFileDialog_getExistingDirectory(LStrHandle _retVal, quintptr parent, LStrHandle caption, LStrHandle dir, int32 options);
extern qint32 Q_DECL_EXPORT QFileDialog_getOpenFileNames(LVArray<LStrHandle>** _retVal, quintptr parent, LStrHandle caption, LStrHandle dir, LStrHandle filter);
extern qint32 Q_DECL_EXPORT QFontDialog_QFontDialog(quintptr* _retVal, const char* _className, LStrHandle initial, quintptr parent);
extern qint32 Q_DECL_EXPORT QFontDialog_setCurrentFont(quintptr _instance, LStrHandle font);
extern qint32 Q_DECL_EXPORT QFontDialog_currentFont(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QFontDialog_selectedFont(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QFontDialog_testOption(bool* _retVal, quintptr _instance, int32 option);
extern qint32 Q_DECL_EXPORT QFontDialog_setOptions(quintptr _instance, int32 options);
extern qint32 Q_DECL_EXPORT QFontDialog_options(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QProgressDialog_QProgressDialog(quintptr* _retVal, const char* _className, quintptr parent);
extern qint32 Q_DECL_EXPORT QProgressDialog_wasCanceled(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QProgressDialog_minimum(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QProgressDialog_maximum(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QProgressDialog_value(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QProgressDialog_labelText(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QProgressDialog_minimumDuration(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QProgressDialog_setAutoReset(quintptr _instance, bool* reset);
extern qint32 Q_DECL_EXPORT QProgressDialog_autoReset(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QProgressDialog_setAutoClose(quintptr _instance, bool* close);
extern qint32 Q_DECL_EXPORT QProgressDialog_autoClose(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QProgressDialog_cancel(quintptr _instance);
extern qint32 Q_DECL_EXPORT QProgressDialog_reset(quintptr _instance);
extern qint32 Q_DECL_EXPORT QProgressDialog_setMaximum(quintptr _instance, qint32 maximum);
extern qint32 Q_DECL_EXPORT QProgressDialog_setMinimum(quintptr _instance, qint32 minimum);
extern qint32 Q_DECL_EXPORT QProgressDialog_setValue(quintptr _instance, qint32 progress);
extern qint32 Q_DECL_EXPORT QProgressDialog_setLabelText(quintptr _instance, LStrHandle text);
extern qint32 Q_DECL_EXPORT QProgressDialog_setCancelButtonText(quintptr _instance, LStrHandle text);
extern qint32 Q_DECL_EXPORT QProgressDialog_setMinimumDuration(quintptr _instance, qint32 ms);
extern qint32 Q_DECL_EXPORT QMessageBox_QMessageBox(quintptr* _retVal, const char* _className, quintptr parent);
extern qint32 Q_DECL_EXPORT QMessageBox_setStandardButtons(quintptr _instance, int32 buttons);
extern qint32 Q_DECL_EXPORT QMessageBox_standardButtons(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QMessageBox_setDefaultButton(quintptr _instance, int32 button);
extern qint32 Q_DECL_EXPORT QMessageBox_setEscapeButton(quintptr _instance, int32 button);
extern qint32 Q_DECL_EXPORT QMessageBox_text(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QMessageBox_setText(quintptr _instance, LStrHandle text);
extern qint32 Q_DECL_EXPORT QMessageBox_icon(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QMessageBox_setIcon(quintptr _instance, int32 icon);
extern qint32 Q_DECL_EXPORT QMessageBox_iconPixmap(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QMessageBox_setIconPixmap(quintptr _instance, LStrHandle pixmap);
extern qint32 Q_DECL_EXPORT QMessageBox_textFormat(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QMessageBox_setTextFormat(quintptr _instance, int32 format);
extern qint32 Q_DECL_EXPORT QMessageBox_setTextInteractionFlags(quintptr _instance, int32 flags);
extern qint32 Q_DECL_EXPORT QMessageBox_textInteractionFlags(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QMessageBox_setCheckBox(quintptr _instance, quintptr checkbox);
extern qint32 Q_DECL_EXPORT QMessageBox_checkBox(quintptr* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QMessageBox_information(int32* _retVal, quintptr parent, LStrHandle title, LStrHandle text, int32 buttons, int32 defaultButton);
extern qint32 Q_DECL_EXPORT QMessageBox_question(int32* _retVal, quintptr parent, LStrHandle title, LStrHandle text, int32 buttons, int32 defaultButton);
extern qint32 Q_DECL_EXPORT QMessageBox_warning(int32* _retVal, quintptr parent, LStrHandle title, LStrHandle text, int32 buttons, int32 defaultButton);
extern qint32 Q_DECL_EXPORT QMessageBox_critical(int32* _retVal, quintptr parent, LStrHandle title, LStrHandle text, int32 buttons, int32 defaultButton);
extern qint32 Q_DECL_EXPORT QMessageBox_about(quintptr parent, LStrHandle title, LStrHandle text);
extern qint32 Q_DECL_EXPORT QMessageBox_aboutQt(quintptr parent, LStrHandle title);
extern qint32 Q_DECL_EXPORT QMessageBox_informativeText(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QMessageBox_setInformativeText(quintptr _instance, LStrHandle text);
extern qint32 Q_DECL_EXPORT QMessageBox_detailedText(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QMessageBox_setDetailedText(quintptr _instance, LStrHandle text);
extern qint32 Q_DECL_EXPORT QMessageBox_standardIcon(LStrHandle _retVal, int32 icon);
extern qint32 Q_DECL_EXPORT QToolBox_QToolBox(quintptr* _retVal, const char* _className, quintptr parent);
extern qint32 Q_DECL_EXPORT QToolBox_addItem(qint32* _retVal, quintptr _instance, quintptr widget, LStrHandle icon, LStrHandle text);
extern qint32 Q_DECL_EXPORT QToolBox_insertItem(qint32* _retVal, quintptr _instance, qint32 index, quintptr widget, LStrHandle icon, LStrHandle text);
extern qint32 Q_DECL_EXPORT QToolBox_removeItem(quintptr _instance, qint32 index);
extern qint32 Q_DECL_EXPORT QToolBox_setItemEnabled(quintptr _instance, qint32 index, bool* enabled);
extern qint32 Q_DECL_EXPORT QToolBox_isItemEnabled(bool* _retVal, quintptr _instance, qint32 index);
extern qint32 Q_DECL_EXPORT QToolBox_setItemText(quintptr _instance, qint32 index, LStrHandle text);
extern qint32 Q_DECL_EXPORT QToolBox_itemText(LStrHandle _retVal, quintptr _instance, qint32 index);
extern qint32 Q_DECL_EXPORT QToolBox_setItemIcon(quintptr _instance, qint32 index, LStrHandle icon);
extern qint32 Q_DECL_EXPORT QToolBox_itemIcon(LStrHandle _retVal, quintptr _instance, qint32 index);
extern qint32 Q_DECL_EXPORT QToolBox_setItemToolTip(quintptr _instance, qint32 index, LStrHandle toolTip);
extern qint32 Q_DECL_EXPORT QToolBox_itemToolTip(LStrHandle _retVal, quintptr _instance, qint32 index);
extern qint32 Q_DECL_EXPORT QToolBox_currentIndex(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QToolBox_currentWidget(quintptr* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QToolBox_widget(quintptr* _retVal, quintptr _instance, qint32 index);
extern qint32 Q_DECL_EXPORT QToolBox_indexOf(qint32* _retVal, quintptr _instance, quintptr widget);
extern qint32 Q_DECL_EXPORT QToolBox_count(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QToolBox_setCurrentIndex(quintptr _instance, qint32 index);
extern qint32 Q_DECL_EXPORT QToolBox_setCurrentWidget(quintptr _instance, quintptr widget);
extern qint32 Q_DECL_EXPORT QGridLayout_QGridLayout(quintptr* _retVal, const char* _className, quintptr parent);
extern qint32 Q_DECL_EXPORT QGridLayout_setHorizontalSpacing(quintptr _instance, qint32 spacing);
extern qint32 Q_DECL_EXPORT QGridLayout_horizontalSpacing(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QGridLayout_setVerticalSpacing(quintptr _instance, qint32 spacing);
extern qint32 Q_DECL_EXPORT QGridLayout_verticalSpacing(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QGridLayout_setRowStretch(quintptr _instance, qint32 row, qint32 stretch);
extern qint32 Q_DECL_EXPORT QGridLayout_setColumnStretch(quintptr _instance, qint32 column, qint32 stretch);
extern qint32 Q_DECL_EXPORT QGridLayout_rowStretch(qint32* _retVal, quintptr _instance, qint32 row);
extern qint32 Q_DECL_EXPORT QGridLayout_columnStretch(qint32* _retVal, quintptr _instance, qint32 column);
extern qint32 Q_DECL_EXPORT QGridLayout_setRowMinimumHeight(quintptr _instance, qint32 row, qint32 minSize);
extern qint32 Q_DECL_EXPORT QGridLayout_setColumnMinimumWidth(quintptr _instance, qint32 column, qint32 minSize);
extern qint32 Q_DECL_EXPORT QGridLayout_rowMinimumHeight(qint32* _retVal, quintptr _instance, qint32 row);
extern qint32 Q_DECL_EXPORT QGridLayout_columnMinimumWidth(qint32* _retVal, quintptr _instance, qint32 column);
extern qint32 Q_DECL_EXPORT QGridLayout_columnCount(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QGridLayout_rowCount(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QGridLayout_cellRect(QRect* _retVal, quintptr _instance, qint32 row, qint32 column);
extern qint32 Q_DECL_EXPORT QGridLayout_addWidget(quintptr _instance, quintptr widget, qint32 row, qint32 column, qint32 rowSpan, qint32 columnSpan);
extern qint32 Q_DECL_EXPORT QGridLayout_addLayout(quintptr _instance, quintptr widget, qint32 row, qint32 column, qint32 rowSpan, qint32 columnSpan);
extern qint32 Q_DECL_EXPORT QGridLayout_setOriginCorner(quintptr _instance, int32 corner);
extern qint32 Q_DECL_EXPORT QGridLayout_originCorner(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QFormLayout_QFormLayout(quintptr* _retVal, const char* _className, quintptr parent);
extern qint32 Q_DECL_EXPORT QFormLayout_setFieldGrowthPolicy(quintptr _instance, int32 policy);
extern qint32 Q_DECL_EXPORT QFormLayout_fieldGrowthPolicy(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QFormLayout_setRowWrapPolicy(quintptr _instance, int32 policy);
extern qint32 Q_DECL_EXPORT QFormLayout_rowWrapPolicy(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QFormLayout_setLabelAlignment(quintptr _instance, int32 alignment);
extern qint32 Q_DECL_EXPORT QFormLayout_labelAlignment(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QFormLayout_setFormAlignment(quintptr _instance, int32 alignment);
extern qint32 Q_DECL_EXPORT QFormLayout_formAlignment(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QFormLayout_setHorizontalSpacing(quintptr _instance, qint32 spacing);
extern qint32 Q_DECL_EXPORT QFormLayout_horizontalSpacing(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QFormLayout_setVerticalSpacing(quintptr _instance, qint32 spacing);
extern qint32 Q_DECL_EXPORT QFormLayout_verticalSpacing(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QFormLayout_spacing(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QFormLayout_setSpacing(quintptr _instance, qint32 spacing);
extern qint32 Q_DECL_EXPORT QFormLayout_addRow(quintptr _instance, LStrHandle labelText, quintptr field);
extern qint32 Q_DECL_EXPORT QFormLayout_insertRow(quintptr _instance, qint32 row, LStrHandle labelText, quintptr field);
extern qint32 Q_DECL_EXPORT QFormLayout_rowCount(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QLCDNumber_QLCDNumber(quintptr* _retVal, const char* _className, quintptr parent);
extern qint32 Q_DECL_EXPORT QLCDNumber_smallDecimalPoint(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QLCDNumber_digitCount(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QLCDNumber_setDigitCount(quintptr _instance, qint32 nDigits);
extern qint32 Q_DECL_EXPORT QLCDNumber_checkOverflow(bool* _retVal, quintptr _instance, double number);
extern qint32 Q_DECL_EXPORT QLCDNumber_mode(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QLCDNumber_setMode(quintptr _instance, int32 mode);
extern qint32 Q_DECL_EXPORT QLCDNumber_segmentStyle(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QLCDNumber_setSegmentStyle(quintptr _instance, int32 style);
extern qint32 Q_DECL_EXPORT QLCDNumber_value(double* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QLCDNumber_display(quintptr _instance, double num);
extern qint32 Q_DECL_EXPORT QLCDNumber_setSmallDecimalPoint(quintptr _instance, bool* smallPoint);
extern qint32 Q_DECL_EXPORT QLineEdit_QLineEdit(quintptr* _retVal, const char* _className, LStrHandle text, quintptr parent);
extern qint32 Q_DECL_EXPORT QLineEdit_text(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QLineEdit_displayText(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QLineEdit_placeholderText(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QLineEdit_setPlaceholderText(quintptr _instance, LStrHandle text);
extern qint32 Q_DECL_EXPORT QLineEdit_maxLength(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QLineEdit_setMaxLength(quintptr _instance, qint32 length);
extern qint32 Q_DECL_EXPORT QLineEdit_setFrame(quintptr _instance, bool* show);
extern qint32 Q_DECL_EXPORT QLineEdit_hasFrame(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QLineEdit_setClearButtonEnabled(quintptr _instance, bool* enable);
extern qint32 Q_DECL_EXPORT QLineEdit_isClearButtonEnabled(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QLineEdit_echoMode(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QLineEdit_setEchoMode(quintptr _instance, int32 echoMode);
extern qint32 Q_DECL_EXPORT QLineEdit_isReadOnly(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QLineEdit_setReadOnly(quintptr _instance, bool* readOnly);
extern qint32 Q_DECL_EXPORT QLineEdit_cursorPosition(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QLineEdit_setCursorPosition(quintptr _instance, qint32 pos);
extern qint32 Q_DECL_EXPORT QLineEdit_setAlignment(quintptr _instance, int32 alignment);
extern qint32 Q_DECL_EXPORT QLineEdit_alignment(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QLineEdit_cursorForward(quintptr _instance, bool* mark, qint32 steps);
extern qint32 Q_DECL_EXPORT QLineEdit_cursorBackward(quintptr _instance, bool* mark, qint32 steps);
extern qint32 Q_DECL_EXPORT QLineEdit_cursorWordForward(quintptr _instance, bool* mark);
extern qint32 Q_DECL_EXPORT QLineEdit_cursorWordBackward(quintptr _instance, bool* mark);
extern qint32 Q_DECL_EXPORT QLineEdit_backspace(quintptr _instance);
extern qint32 Q_DECL_EXPORT QLineEdit_del(quintptr _instance);
extern qint32 Q_DECL_EXPORT QLineEdit_home(quintptr _instance, bool* mark);
extern qint32 Q_DECL_EXPORT QLineEdit_end(quintptr _instance, bool* mark);
extern qint32 Q_DECL_EXPORT QLineEdit_isModified(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QLineEdit_setModified(quintptr _instance, bool* modified);
extern qint32 Q_DECL_EXPORT QLineEdit_setSelection(quintptr _instance, qint32 start, qint32 length);
extern qint32 Q_DECL_EXPORT QLineEdit_hasSelectedText(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QLineEdit_selectedText(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QLineEdit_selectionStart(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QLineEdit_isUndoAvailable(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QLineEdit_isRedoAvailable(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QLineEdit_setDragEnabled(quintptr _instance, bool* enabled);
extern qint32 Q_DECL_EXPORT QLineEdit_dragEnabled(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QLineEdit_setCursorMoveStyle(quintptr _instance, int32 style);
extern qint32 Q_DECL_EXPORT QLineEdit_cursorMoveStyle(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QLineEdit_inputMask(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QLineEdit_setInputMask(quintptr _instance, LStrHandle inputMask);
extern qint32 Q_DECL_EXPORT QLineEdit_hasAcceptableInput(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QLineEdit_setTextMargins(quintptr _instance, QMargins* margins);
extern qint32 Q_DECL_EXPORT QLineEdit_textMargins(QMargins* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QLineEdit_setText(quintptr _instance, LStrHandle text);
extern qint32 Q_DECL_EXPORT QLineEdit_clear(quintptr _instance);
extern qint32 Q_DECL_EXPORT QLineEdit_selectAll(quintptr _instance);
extern qint32 Q_DECL_EXPORT QLineEdit_undo(quintptr _instance);
extern qint32 Q_DECL_EXPORT QLineEdit_redo(quintptr _instance);
extern qint32 Q_DECL_EXPORT QLineEdit_cut(quintptr _instance);
extern qint32 Q_DECL_EXPORT QLineEdit_copy(quintptr _instance);
extern qint32 Q_DECL_EXPORT QLineEdit_paste(quintptr _instance);
extern qint32 Q_DECL_EXPORT QLineEdit_deselect(quintptr _instance);
extern qint32 Q_DECL_EXPORT QLineEdit_insert(quintptr _instance, LStrHandle text);
extern qint32 Q_DECL_EXPORT QRadioButton_QRadioButton(quintptr* _retVal, const char* _className, LStrHandle text, quintptr parent);
extern qint32 Q_DECL_EXPORT QTextEdit_QTextEdit(quintptr* _retVal, const char* _className, LStrHandle text, quintptr parent);
extern qint32 Q_DECL_EXPORT QTextEdit_setPlaceholderText(quintptr _instance, LStrHandle placeholderText);
extern qint32 Q_DECL_EXPORT QTextEdit_placeholderText(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QTextEdit_isReadOnly(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QTextEdit_setReadOnly(quintptr _instance, bool* readOnly);
extern qint32 Q_DECL_EXPORT QTextEdit_setTextInteractionFlags(quintptr _instance, int32 flags);
extern qint32 Q_DECL_EXPORT QTextEdit_textInteractionFlags(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QTextEdit_fontPointSize(double* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QTextEdit_fontFamily(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QTextEdit_fontWeight(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QTextEdit_fontUnderline(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QTextEdit_fontItalic(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QTextEdit_textColor(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QTextEdit_textBackgroundColor(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QTextEdit_currentFont(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QTextEdit_alignment(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QTextEdit_autoFormatting(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QTextEdit_setAutoFormatting(quintptr _instance, int32 features);
extern qint32 Q_DECL_EXPORT QTextEdit_tabChangesFocus(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QTextEdit_setTabChangesFocus(quintptr _instance, bool* change);
extern qint32 Q_DECL_EXPORT QTextEdit_setDocumentTitle(quintptr _instance, LStrHandle title);
extern qint32 Q_DECL_EXPORT QTextEdit_documentTitle(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QTextEdit_isUndoRedoEnabled(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QTextEdit_setUndoRedoEnabled(quintptr _instance, bool* enable);
extern qint32 Q_DECL_EXPORT QTextEdit_lineWrapMode(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QTextEdit_setLineWrapMode(quintptr _instance, int32 mode);
extern qint32 Q_DECL_EXPORT QTextEdit_lineWrapColumnOrWidth(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QTextEdit_setLineWrapColumnOrWidth(quintptr _instance, qint32 width);
extern qint32 Q_DECL_EXPORT QTextEdit_toPlainText(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QTextEdit_toHtml(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QTextEdit_ensureCursorVisible(quintptr _instance);
extern qint32 Q_DECL_EXPORT QTextEdit_cursorRect(QRect* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QTextEdit_anchorAt(LStrHandle _retVal, quintptr _instance, QPoint* pos);
extern qint32 Q_DECL_EXPORT QTextEdit_overwriteMode(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QTextEdit_setOverwriteMode(quintptr _instance, bool* overwrite);
extern qint32 Q_DECL_EXPORT QTextEdit_tabStopWidth(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QTextEdit_setTabStopWidth(quintptr _instance, qint32 width);
extern qint32 Q_DECL_EXPORT QTextEdit_cursorWidth(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QTextEdit_setCursorWidth(quintptr _instance, qint32 width);
extern qint32 Q_DECL_EXPORT QTextEdit_acceptRichText(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QTextEdit_setAcceptRichText(quintptr _instance, bool* accept);
extern qint32 Q_DECL_EXPORT QTextEdit_canPaste(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QTextEdit_setFontPointSize(quintptr _instance, double size);
extern qint32 Q_DECL_EXPORT QTextEdit_setFontFamily(quintptr _instance, LStrHandle fontFamily);
extern qint32 Q_DECL_EXPORT QTextEdit_setFontWeight(quintptr _instance, qint32 weight);
extern qint32 Q_DECL_EXPORT QTextEdit_setFontUnderline(quintptr _instance, bool* underline);
extern qint32 Q_DECL_EXPORT QTextEdit_setFontItalic(quintptr _instance, bool* italic);
extern qint32 Q_DECL_EXPORT QTextEdit_setTextColor(quintptr _instance, LStrHandle color);
extern qint32 Q_DECL_EXPORT QTextEdit_setTextBackgroundColor(quintptr _instance, LStrHandle color);
extern qint32 Q_DECL_EXPORT QTextEdit_setCurrentFont(quintptr _instance, LStrHandle font);
extern qint32 Q_DECL_EXPORT QTextEdit_setAlignment(quintptr _instance, int32 alignment);
extern qint32 Q_DECL_EXPORT QTextEdit_setPlainText(quintptr _instance, LStrHandle text);
extern qint32 Q_DECL_EXPORT QTextEdit_setHtml(quintptr _instance, LStrHandle text);
extern qint32 Q_DECL_EXPORT QTextEdit_setText(quintptr _instance, LStrHandle text);
extern qint32 Q_DECL_EXPORT QTextEdit_cut(quintptr _instance);
extern qint32 Q_DECL_EXPORT QTextEdit_copy(quintptr _instance);
extern qint32 Q_DECL_EXPORT QTextEdit_paste(quintptr _instance);
extern qint32 Q_DECL_EXPORT QTextEdit_undo(quintptr _instance);
extern qint32 Q_DECL_EXPORT QTextEdit_redo(quintptr _instance);
extern qint32 Q_DECL_EXPORT QTextEdit_clear(quintptr _instance);
extern qint32 Q_DECL_EXPORT QTextEdit_selectAll(quintptr _instance);
extern qint32 Q_DECL_EXPORT QTextEdit_insertPlainText(quintptr _instance, LStrHandle text);
extern qint32 Q_DECL_EXPORT QTextEdit_insertHtml(quintptr _instance, LStrHandle text);
extern qint32 Q_DECL_EXPORT QTextEdit_append(quintptr _instance, LStrHandle text);
extern qint32 Q_DECL_EXPORT QTextEdit_scrollToAnchor(quintptr _instance, LStrHandle name);
extern qint32 Q_DECL_EXPORT QTextEdit_zoomIn(quintptr _instance, qint32 range);
extern qint32 Q_DECL_EXPORT QTextEdit_zoomOut(quintptr _instance, qint32 range);
extern qint32 Q_DECL_EXPORT QMdiArea_QMdiArea(quintptr* _retVal, const char* _className, quintptr parent);
extern qint32 Q_DECL_EXPORT QMdiArea_currentSubWindow(quintptr* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QMdiArea_activeSubWindow(quintptr* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QMdiArea_subWindowList(LVArray<quintptr>** _retVal, quintptr _instance, int32 order);
extern qint32 Q_DECL_EXPORT QMdiArea_addSubWindow(quintptr* _retVal, quintptr _instance, quintptr widget, int32 flags);
extern qint32 Q_DECL_EXPORT QMdiArea_removeSubWindow(quintptr _instance, quintptr widget);
extern qint32 Q_DECL_EXPORT QMdiArea_background(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QMdiArea_setBackground(quintptr _instance, LStrHandle background);
extern qint32 Q_DECL_EXPORT QMdiArea_activationOrder(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QMdiArea_setActivationOrder(quintptr _instance, int32 order);
extern qint32 Q_DECL_EXPORT QMdiArea_setActiveSubWindow(quintptr _instance, quintptr window);
extern qint32 Q_DECL_EXPORT QMdiArea_tileSubWindows(quintptr _instance);
extern qint32 Q_DECL_EXPORT QMdiArea_cascadeSubWindows(quintptr _instance);
extern qint32 Q_DECL_EXPORT QMdiArea_closeActiveSubWindow(quintptr _instance);
extern qint32 Q_DECL_EXPORT QMdiArea_closeAllSubWindows(quintptr _instance);
extern qint32 Q_DECL_EXPORT QMdiArea_activateNextSubWindow(quintptr _instance);
extern qint32 Q_DECL_EXPORT QMdiArea_activatePreviousSubWindow(quintptr _instance);
extern qint32 Q_DECL_EXPORT QMdiSubWindow_QMdiSubWindow(quintptr* _retVal, const char* _className, quintptr parent);
extern qint32 Q_DECL_EXPORT QMdiSubWindow_setWidget(quintptr _instance, quintptr widget);
extern qint32 Q_DECL_EXPORT QMdiSubWindow_widget(quintptr* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QMdiSubWindow_isShaded(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QMdiSubWindow_setOption(quintptr _instance, int32 option, bool* on);
extern qint32 Q_DECL_EXPORT QMdiSubWindow_testOption(bool* _retVal, quintptr _instance, int32 option);
extern qint32 Q_DECL_EXPORT QMdiSubWindow_setKeyboardSingleStep(quintptr _instance, qint32 step);
extern qint32 Q_DECL_EXPORT QMdiSubWindow_keyboardSingleStep(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QMdiSubWindow_setKeyboardPageStep(quintptr _instance, qint32 step);
extern qint32 Q_DECL_EXPORT QMdiSubWindow_keyboardPageStep(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QMdiSubWindow_mdiArea(quintptr* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QMdiSubWindow_showShaded(quintptr _instance);
extern qint32 Q_DECL_EXPORT QAbstractSpinBox_isReadOnly(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QAbstractSpinBox_setReadOnly(quintptr _instance, bool* readOnly);
extern qint32 Q_DECL_EXPORT QSpinBox_QSpinBox(quintptr* _retVal, const char* _className, quintptr parent);
extern qint32 Q_DECL_EXPORT QSpinBox_value(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QSpinBox_prefix(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QSpinBox_setPrefix(quintptr _instance, LStrHandle prefix);
extern qint32 Q_DECL_EXPORT QSpinBox_suffix(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QSpinBox_setSuffix(quintptr _instance, LStrHandle suffix);
extern qint32 Q_DECL_EXPORT QSpinBox_cleanText(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QSpinBox_singleStep(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QSpinBox_setSingleStep(quintptr _instance, qint32 val);
extern qint32 Q_DECL_EXPORT QSpinBox_minimum(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QSpinBox_setMinimum(quintptr _instance, qint32 min);
extern qint32 Q_DECL_EXPORT QSpinBox_maximum(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QSpinBox_setMaximum(quintptr _instance, qint32 max);
extern qint32 Q_DECL_EXPORT QSpinBox_setRange(quintptr _instance, qint32 min, qint32 max);
extern qint32 Q_DECL_EXPORT QSpinBox_displayIntegerBase(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QSpinBox_setDisplayIntegerBase(quintptr _instance, qint32 base);
extern qint32 Q_DECL_EXPORT QSpinBox_setValue(quintptr _instance, qint32 val);
extern qint32 Q_DECL_EXPORT QDoubleSpinBox_QDoubleSpinBox(quintptr* _retVal, const char* _className, quintptr parent);
extern qint32 Q_DECL_EXPORT QDoubleSpinBox_value(double* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QDoubleSpinBox_prefix(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QDoubleSpinBox_setPrefix(quintptr _instance, LStrHandle prefix);
extern qint32 Q_DECL_EXPORT QDoubleSpinBox_suffix(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QDoubleSpinBox_setSuffix(quintptr _instance, LStrHandle suffix);
extern qint32 Q_DECL_EXPORT QDoubleSpinBox_cleanText(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QDoubleSpinBox_singleStep(double* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QDoubleSpinBox_setSingleStep(quintptr _instance, double val);
extern qint32 Q_DECL_EXPORT QDoubleSpinBox_minimum(double* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QDoubleSpinBox_setMinimum(quintptr _instance, double min);
extern qint32 Q_DECL_EXPORT QDoubleSpinBox_maximum(double* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QDoubleSpinBox_setMaximum(quintptr _instance, double max);
extern qint32 Q_DECL_EXPORT QDoubleSpinBox_setRange(quintptr _instance, double min, double max);
extern qint32 Q_DECL_EXPORT QDoubleSpinBox_decimals(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QDoubleSpinBox_setDecimals(quintptr _instance, qint32 prec);
extern qint32 Q_DECL_EXPORT QDoubleSpinBox_valueFromText(double* _retVal, quintptr _instance, LStrHandle text);
extern qint32 Q_DECL_EXPORT QDoubleSpinBox_textFromValue(LStrHandle _retVal, quintptr _instance, double val);
extern qint32 Q_DECL_EXPORT QDoubleSpinBox_setValue(quintptr _instance, double val);
extern qint32 Q_DECL_EXPORT QStackedWidget_QStackedWidget(quintptr* _retVal, const char* _className, quintptr parent);
extern qint32 Q_DECL_EXPORT QStackedWidget_insertWidget(qint32* _retVal, quintptr _instance, qint32 index, quintptr widget);
extern qint32 Q_DECL_EXPORT QStackedWidget_removeWidget(quintptr _instance, quintptr widget);
extern qint32 Q_DECL_EXPORT QStackedWidget_currentWidget(quintptr* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QStackedWidget_currentIndex(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QStackedWidget_indexOf(qint32* _retVal, quintptr _instance, quintptr widget);
extern qint32 Q_DECL_EXPORT QStackedWidget_widget(quintptr* _retVal, quintptr _instance, qint32 index);
extern qint32 Q_DECL_EXPORT QStackedWidget_count(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QStackedWidget_setCurrentIndex(quintptr _instance, qint32 index);
extern qint32 Q_DECL_EXPORT QStackedWidget_setCurrentWidget(quintptr _instance, quintptr widget);
extern qint32 Q_DECL_EXPORT QSvgWidget_QSvgWidget(quintptr* _retVal, const char* _className, LStrHandle file);
extern qint32 Q_DECL_EXPORT QSvgWidget_load(quintptr _instance, LStrHandle contents);
#ifdef Q_OS_WIN
extern qint32 Q_DECL_EXPORT QWinJumpListCategory_QWinJumpListCategory(quintptr* _retVal, LStrHandle title);
extern qint32 Q_DECL_EXPORT QWinJumpListCategory_type(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWinJumpListCategory_isVisible(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWinJumpListCategory_setVisible(quintptr _instance, bool* visible);
extern qint32 Q_DECL_EXPORT QWinJumpListCategory_title(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWinJumpListCategory_setTitle(quintptr _instance, LStrHandle title);
extern qint32 Q_DECL_EXPORT QWinJumpListCategory_count(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWinJumpListCategory_isEmpty(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWinJumpListCategory_addItem(quintptr _instance, quintptr item);
extern qint32 Q_DECL_EXPORT QWinJumpListCategory_addDestination(quintptr* _retVal, quintptr _instance, LStrHandle filePath);
extern qint32 Q_DECL_EXPORT QWinJumpListCategory_addLink(quintptr* _retVal, quintptr _instance, LStrHandle icon, LStrHandle title, LStrHandle executablePath, LVArray<LStrHandle>** arguments);
extern qint32 Q_DECL_EXPORT QWinJumpListCategory_addSeparator(quintptr* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWinJumpListCategory_clear(quintptr _instance);
extern qint32 Q_DECL_EXPORT QWinJumpListItem_QWinJumpListItem(quintptr* _retVal, int32 type);
extern qint32 Q_DECL_EXPORT QWinJumpListItem_setType(quintptr _instance, int32 type);
extern qint32 Q_DECL_EXPORT QWinJumpListItem_type(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWinJumpListItem_setFilePath(quintptr _instance, LStrHandle filePath);
extern qint32 Q_DECL_EXPORT QWinJumpListItem_filePath(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWinJumpListItem_setWorkingDirectory(quintptr _instance, LStrHandle workingDirectory);
extern qint32 Q_DECL_EXPORT QWinJumpListItem_workingDirectory(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWinJumpListItem_setIcon(quintptr _instance, LStrHandle icon);
extern qint32 Q_DECL_EXPORT QWinJumpListItem_icon(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWinJumpListItem_setTitle(quintptr _instance, LStrHandle title);
extern qint32 Q_DECL_EXPORT QWinJumpListItem_title(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWinJumpListItem_setDescription(quintptr _instance, LStrHandle description);
extern qint32 Q_DECL_EXPORT QWinJumpListItem_description(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWinJumpListItem_setArguments(quintptr _instance, LVArray<LStrHandle>** arguments);
extern qint32 Q_DECL_EXPORT QWinJumpListItem_arguments(LVArray<LStrHandle>** _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWinJumpList_QWinJumpList(quintptr* _retVal, const char* _className, quintptr parent);
extern qint32 Q_DECL_EXPORT QWinJumpList_identifier(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWinJumpList_setIdentifier(quintptr _instance, LStrHandle identifier);
extern qint32 Q_DECL_EXPORT QWinJumpList_recent(quintptr* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWinJumpList_frequent(quintptr* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWinJumpList_tasks(quintptr* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWinJumpList_addCategory(quintptr _instance, quintptr category);
extern qint32 Q_DECL_EXPORT QWinJumpList_clear(quintptr _instance);
extern qint32 Q_DECL_EXPORT QWinTaskbarButton_QWinTaskbarButton(quintptr* _retVal, const char* _className, quintptr parent);
extern qint32 Q_DECL_EXPORT QWinTaskbarButton_setWindow(quintptr _instance, quintptr window);
extern qint32 Q_DECL_EXPORT QWinTaskbarButton_window(quintptr* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWinTaskbarButton_overlayIcon(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWinTaskbarButton_overlayAccessibleDescription(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWinTaskbarButton_progress(quintptr* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWinTaskbarButton_setOverlayIcon(quintptr _instance, LStrHandle icon);
extern qint32 Q_DECL_EXPORT QWinTaskbarButton_setOverlayAccessibleDescription(quintptr _instance, LStrHandle description);
extern qint32 Q_DECL_EXPORT QWinTaskbarButton_clearOverlayIcon(quintptr _instance);
extern qint32 Q_DECL_EXPORT QWinTaskbarProgress_value(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWinTaskbarProgress_minimum(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWinTaskbarProgress_maximum(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWinTaskbarProgress_isVisible(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWinTaskbarProgress_isPaused(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWinTaskbarProgress_isStopped(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWinTaskbarProgress_setValue(quintptr _instance, qint32 value);
extern qint32 Q_DECL_EXPORT QWinTaskbarProgress_setMinimum(quintptr _instance, qint32 minimum);
extern qint32 Q_DECL_EXPORT QWinTaskbarProgress_setMaximum(quintptr _instance, qint32 maximum);
extern qint32 Q_DECL_EXPORT QWinTaskbarProgress_setRange(quintptr _instance, qint32 minimum, qint32 maximum);
extern qint32 Q_DECL_EXPORT QWinTaskbarProgress_reset(quintptr _instance);
extern qint32 Q_DECL_EXPORT QWinTaskbarProgress_show(quintptr _instance);
extern qint32 Q_DECL_EXPORT QWinTaskbarProgress_hide(quintptr _instance);
extern qint32 Q_DECL_EXPORT QWinTaskbarProgress_setVisible(quintptr _instance, bool* visible);
extern qint32 Q_DECL_EXPORT QWinTaskbarProgress_pause(quintptr _instance);
extern qint32 Q_DECL_EXPORT QWinTaskbarProgress_resume(quintptr _instance);
extern qint32 Q_DECL_EXPORT QWinTaskbarProgress_setPaused(quintptr _instance, bool* paused);
extern qint32 Q_DECL_EXPORT QWinTaskbarProgress_stop(quintptr _instance);
extern qint32 Q_DECL_EXPORT QWinThumbnailToolBar_QWinThumbnailToolBar(quintptr* _retVal, const char* _className, quintptr parent);
extern qint32 Q_DECL_EXPORT QWinThumbnailToolBar_setWindow(quintptr _instance, quintptr window);
extern qint32 Q_DECL_EXPORT QWinThumbnailToolBar_window(quintptr* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWinThumbnailToolBar_addButton(quintptr _instance, quintptr button);
extern qint32 Q_DECL_EXPORT QWinThumbnailToolBar_removeButton(quintptr _instance, quintptr button);
extern qint32 Q_DECL_EXPORT QWinThumbnailToolBar_count(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWinThumbnailToolBar_iconicPixmapNotificationsEnabled(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWinThumbnailToolBar_setIconicPixmapNotificationsEnabled(quintptr _instance, bool* enabled);
extern qint32 Q_DECL_EXPORT QWinThumbnailToolBar_iconicThumbnailPixmap(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWinThumbnailToolBar_iconicLivePreviewPixmap(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWinThumbnailToolBar_clear(quintptr _instance);
extern qint32 Q_DECL_EXPORT QWinThumbnailToolBar_setIconicThumbnailPixmap(quintptr _instance, LStrHandle pixmap);
extern qint32 Q_DECL_EXPORT QWinThumbnailToolBar_setIconicLivePreviewPixmap(quintptr _instance, LStrHandle pixmap);
extern qint32 Q_DECL_EXPORT QWinThumbnailToolButton_QWinThumbnailToolButton(quintptr* _retVal, const char* _className, quintptr parent);
extern qint32 Q_DECL_EXPORT QWinThumbnailToolButton_setToolTip(quintptr _instance, LStrHandle toolTip);
extern qint32 Q_DECL_EXPORT QWinThumbnailToolButton_toolTip(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWinThumbnailToolButton_setIcon(quintptr _instance, LStrHandle icon);
extern qint32 Q_DECL_EXPORT QWinThumbnailToolButton_icon(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWinThumbnailToolButton_setEnabled(quintptr _instance, bool* enabled);
extern qint32 Q_DECL_EXPORT QWinThumbnailToolButton_isEnabled(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWinThumbnailToolButton_setInteractive(quintptr _instance, bool* interactive);
extern qint32 Q_DECL_EXPORT QWinThumbnailToolButton_isInteractive(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWinThumbnailToolButton_setVisible(quintptr _instance, bool* visible);
extern qint32 Q_DECL_EXPORT QWinThumbnailToolButton_isVisible(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWinThumbnailToolButton_setDismissOnClick(quintptr _instance, bool* dismiss);
extern qint32 Q_DECL_EXPORT QWinThumbnailToolButton_dismissOnClick(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWinThumbnailToolButton_setFlat(quintptr _instance, bool* flat);
extern qint32 Q_DECL_EXPORT QWinThumbnailToolButton_isFlat(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QWinThumbnailToolButton_click(quintptr _instance);
#endif // Q_OS_WIN
extern qint32 Q_DECL_EXPORT QwtPlotItem_attach(quintptr _instance, quintptr plot);
extern qint32 Q_DECL_EXPORT QwtPlotItem_detach(quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtPlotItem_plot(quintptr* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtPlotItem_setTitle(quintptr _instance, LStrHandle title);
extern qint32 Q_DECL_EXPORT QwtPlotItem_title(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtPlotItem_setLegendIconSize(quintptr _instance, QSize* size);
extern qint32 Q_DECL_EXPORT QwtPlotItem_legendIconSize(QSize* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtPlotItem_z(double* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtPlotItem_setZ(quintptr _instance, double z);
extern qint32 Q_DECL_EXPORT QwtPlotItem_setVisible(quintptr _instance, bool* visible);
extern qint32 Q_DECL_EXPORT QwtPlotItem_isVisible(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtPlotItem_setXAxis(quintptr _instance, int32 axis);
extern qint32 Q_DECL_EXPORT QwtPlotItem_xAxis(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtPlotItem_setYAxis(quintptr _instance, int32 axis);
extern qint32 Q_DECL_EXPORT QwtPlotItem_yAxis(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtPlotSeriesItem_setOrientation(quintptr _instance, int32 orientation);
extern qint32 Q_DECL_EXPORT QwtPlotSeriesItem_orientation(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtPlotCurve_QwtPlotCurve(quintptr* _retVal, LStrHandle title);
extern qint32 Q_DECL_EXPORT QwtPlotCurve_setPaintAttribute(quintptr _instance, int32 attribute, bool* on);
extern qint32 Q_DECL_EXPORT QwtPlotCurve_testPaintAttribute(bool* _retVal, quintptr _instance, int32 attribute);
extern qint32 Q_DECL_EXPORT QwtPlotCurve_setLegendAttribute(quintptr _instance, int32 attribute, bool* on);
extern qint32 Q_DECL_EXPORT QwtPlotCurve_testLegendAttribute(bool* _retVal, quintptr _instance, int32 attribute);
extern qint32 Q_DECL_EXPORT QwtPlotCurve_setSamples(quintptr _instance, LVArray<double>** xData, LVArray<double>** yData);
extern qint32 Q_DECL_EXPORT QwtPlotCurve_setCurveAttribute(quintptr _instance, int32 attribute, bool* on);
extern qint32 Q_DECL_EXPORT QwtPlotCurve_testCurveAttribute(bool* _retVal, quintptr _instance, int32 attribute);
extern qint32 Q_DECL_EXPORT QwtPlotCurve_setPen(quintptr _instance, LStrHandle pen);
extern qint32 Q_DECL_EXPORT QwtPlotCurve_pen(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtPlotCurve_setBaseline(quintptr _instance, double baseline);
extern qint32 Q_DECL_EXPORT QwtPlotCurve_baseline(double* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtPlotCurve_setStyle(quintptr _instance, int32 style);
extern qint32 Q_DECL_EXPORT QwtPlotCurve_style(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtPlotAbstractBarChart_setLayoutPolicy(quintptr _instance, int32 policy);
extern qint32 Q_DECL_EXPORT QwtPlotAbstractBarChart_layoutPolicy(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtPlotAbstractBarChart_setLayoutHint(quintptr _instance, double hint);
extern qint32 Q_DECL_EXPORT QwtPlotAbstractBarChart_layoutHint(double* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtPlotAbstractBarChart_setSpacing(quintptr _instance, qint32 spacing);
extern qint32 Q_DECL_EXPORT QwtPlotAbstractBarChart_spacing(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtPlotAbstractBarChart_setMargin(quintptr _instance, qint32 margin);
extern qint32 Q_DECL_EXPORT QwtPlotAbstractBarChart_margin(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtPlotAbstractBarChart_setBaseline(quintptr _instance, double baseline);
extern qint32 Q_DECL_EXPORT QwtPlotAbstractBarChart_baseline(double* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtPlotBarChart_setSamples(quintptr _instance, LVArray<double>** samples);
extern qint32 Q_DECL_EXPORT QwtPlotBarChart_setLegendMode(quintptr _instance, int32 mode);
extern qint32 Q_DECL_EXPORT QwtPlotBarChart_legendMode(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtAbstractScaleDraw_enableComponent(quintptr _instance, int32 component, bool* enable);
extern qint32 Q_DECL_EXPORT QwtAbstractScaleDraw_hasComponent(bool* _retVal, quintptr _instance, int32 component);
extern qint32 Q_DECL_EXPORT QwtAbstractScaleDraw_setSpacing(quintptr _instance, double spacing);
extern qint32 Q_DECL_EXPORT QwtAbstractScaleDraw_spacing(double* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtAbstractScaleDraw_setPenWidthF(quintptr _instance, double width);
extern qint32 Q_DECL_EXPORT QwtAbstractScaleDraw_penWidthF(double* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtScaleDraw_alignment(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtScaleDraw_setAlignment(quintptr _instance, int32 alignment);
extern qint32 Q_DECL_EXPORT QwtScaleDraw_orientation(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtScaleDraw_setLabelAlignment(quintptr _instance, int32 alignment);
extern qint32 Q_DECL_EXPORT QwtScaleDraw_labelAlignment(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtScaleDraw_setLabelRotation(quintptr _instance, double rotation);
extern qint32 Q_DECL_EXPORT QwtScaleDraw_labelRotation(double* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtScaleEngine_setAttribute(quintptr _instance, int32 attribute, bool* on);
extern qint32 Q_DECL_EXPORT QwtScaleEngine_testAttribute(bool* _retVal, quintptr _instance, int32 attribute);
extern qint32 Q_DECL_EXPORT QwtScaleEngine_setReference(quintptr _instance, double reference);
extern qint32 Q_DECL_EXPORT QwtScaleEngine_reference(double* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtLinearScaleEngine_QwtLinearScaleEngine(quintptr* _retVal, quint32 base);
extern qint32 Q_DECL_EXPORT QwtLogScaleEngine_QwtLogScaleEngine(quintptr* _retVal, quint32 base);
extern qint32 Q_DECL_EXPORT QwtAbstractScale_setScale(quintptr _instance, double lowerBound, double upperBound);
extern qint32 Q_DECL_EXPORT QwtAbstractScale_setLowerBound(quintptr _instance, double value);
extern qint32 Q_DECL_EXPORT QwtAbstractScale_lowerBound(double* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtAbstractScale_setUpperBound(quintptr _instance, double value);
extern qint32 Q_DECL_EXPORT QwtAbstractScale_upperBound(double* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtAbstractScale_setScaleStepSize(quintptr _instance, double stepSize);
extern qint32 Q_DECL_EXPORT QwtAbstractScale_scaleStepSize(double* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtAbstractScale_setScaleMaxMajor(quintptr _instance, qint32 ticks);
extern qint32 Q_DECL_EXPORT QwtAbstractScale_scaleMaxMinor(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtAbstractScale_setScaleMaxMinor(quintptr _instance, qint32 ticks);
extern qint32 Q_DECL_EXPORT QwtAbstractScale_scaleMaxMajor(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtAbstractScale_transform(qint32* _retVal, quintptr _instance, double value);
extern qint32 Q_DECL_EXPORT QwtAbstractScale_invTransform(double* _retVal, quintptr _instance, qint32 value);
extern qint32 Q_DECL_EXPORT QwtAbstractScale_isInverted(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtAbstractScale_minimum(double* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtAbstractScale_maximum(double* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtThermo_QwtThermo(quintptr* _retVal, const char* _className, quintptr parent);
extern qint32 Q_DECL_EXPORT QwtThermo_setOrientation(quintptr _instance, int32 orientation);
extern qint32 Q_DECL_EXPORT QwtThermo_orientation(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtThermo_setScalePosition(quintptr _instance, int32 position);
extern qint32 Q_DECL_EXPORT QwtThermo_scalePosition(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtThermo_setSpacing(quintptr _instance, qint32 spacing);
extern qint32 Q_DECL_EXPORT QwtThermo_spacing(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtThermo_setBorderWidth(quintptr _instance, qint32 width);
extern qint32 Q_DECL_EXPORT QwtThermo_borderWidth(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtThermo_setOriginMode(quintptr _instance, int32 mode);
extern qint32 Q_DECL_EXPORT QwtThermo_originMode(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtThermo_setOrigin(quintptr _instance, double origin);
extern qint32 Q_DECL_EXPORT QwtThermo_origin(double* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtThermo_setFillBrush(quintptr _instance, LStrHandle brush);
extern qint32 Q_DECL_EXPORT QwtThermo_fillBrush(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtThermo_setAlarmBrush(quintptr _instance, LStrHandle brush);
extern qint32 Q_DECL_EXPORT QwtThermo_alarmBrush(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtThermo_setAlarmLevel(quintptr _instance, double level);
extern qint32 Q_DECL_EXPORT QwtThermo_alarmLevel(double* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtThermo_setAlarmEnabled(quintptr _instance, bool* enabled);
extern qint32 Q_DECL_EXPORT QwtThermo_alarmEnabled(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtThermo_setPipeWidth(quintptr _instance, qint32 width);
extern qint32 Q_DECL_EXPORT QwtThermo_pipeWidth(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtThermo_value(double* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtThermo_setValue(quintptr _instance, double value);
extern qint32 Q_DECL_EXPORT QwtAbstractSlider_setValid(quintptr _instance, bool* valid);
extern qint32 Q_DECL_EXPORT QwtAbstractSlider_isValid(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtAbstractSlider_value(double* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtAbstractSlider_setWrapping(quintptr _instance, bool* wrapping);
extern qint32 Q_DECL_EXPORT QwtAbstractSlider_wrapping(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtAbstractSlider_setTotalSteps(quintptr _instance, quint32 totalSteps);
extern qint32 Q_DECL_EXPORT QwtAbstractSlider_totalSteps(quint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtAbstractSlider_setSingleSteps(quintptr _instance, quint32 singleSteps);
extern qint32 Q_DECL_EXPORT QwtAbstractSlider_singleSteps(quint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtAbstractSlider_setPageSteps(quintptr _instance, quint32 pageSteps);
extern qint32 Q_DECL_EXPORT QwtAbstractSlider_pageSteps(quint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtAbstractSlider_setStepAlignment(quintptr _instance, bool* stepAlignment);
extern qint32 Q_DECL_EXPORT QwtAbstractSlider_stepAlignment(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtAbstractSlider_setTracking(quintptr _instance, bool* tracking);
extern qint32 Q_DECL_EXPORT QwtAbstractSlider_isTracking(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtAbstractSlider_setReadOnly(quintptr _instance, bool* readOnly);
extern qint32 Q_DECL_EXPORT QwtAbstractSlider_isReadOnly(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtAbstractSlider_setInvertedControls(quintptr _instance, bool* inverted);
extern qint32 Q_DECL_EXPORT QwtAbstractSlider_invertedControls(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtAbstractSlider_setValue(quintptr _instance, double value);
extern qint32 Q_DECL_EXPORT QwtSlider_QwtSlider(quintptr* _retVal, const char* _className, int32 orientation, quintptr parent);
extern qint32 Q_DECL_EXPORT QwtSlider_setOrientation(quintptr _instance, int32 orientation);
extern qint32 Q_DECL_EXPORT QwtSlider_orientation(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtSlider_setScalePosition(quintptr _instance, int32 position);
extern qint32 Q_DECL_EXPORT QwtSlider_scalePosition(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtSlider_setTrough(quintptr _instance, bool* hasTrough);
extern qint32 Q_DECL_EXPORT QwtSlider_hasTrough(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtSlider_setGroove(quintptr _instance, bool* hasGroove);
extern qint32 Q_DECL_EXPORT QwtSlider_hasGroove(bool* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtSlider_setHandleSize(quintptr _instance, QSize* size);
extern qint32 Q_DECL_EXPORT QwtSlider_handleSize(QSize* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtSlider_setBorderWidth(quintptr _instance, qint32 width);
extern qint32 Q_DECL_EXPORT QwtSlider_borderWidth(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtSlider_setSpacing(quintptr _instance, qint32 spacing);
extern qint32 Q_DECL_EXPORT QwtSlider_spacing(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtSlider_setUpdateInterval(quintptr _instance, qint32 interval);
extern qint32 Q_DECL_EXPORT QwtSlider_updateInterval(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtPlot_QwtPlot(quintptr* _retVal, const char* _className, LStrHandle title, quintptr parent);
extern qint32 Q_DECL_EXPORT QwtPlot_setTitle(quintptr _instance, LStrHandle title);
extern qint32 Q_DECL_EXPORT QwtPlot_title(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtPlot_setCanvasBackground(quintptr _instance, LStrHandle brush);
extern qint32 Q_DECL_EXPORT QwtPlot_canvasBackground(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT QwtPlot_axisScaleEngine(quintptr* _retVal, quintptr _instance, int32 axisId);
extern qint32 Q_DECL_EXPORT QwtPlot_setAxisScaleEngine(quintptr _instance, int32 axisId, quintptr engine);
extern qint32 Q_DECL_EXPORT QwtPlot_setAxisAutoScale(quintptr _instance, int32 axisId, bool* on);
extern qint32 Q_DECL_EXPORT QwtPlot_axisAutoScale(bool* _retVal, quintptr _instance, int32 axisId);
extern qint32 Q_DECL_EXPORT QwtPlot_setAxisFont(quintptr _instance, int32 axisId, LStrHandle font);
extern qint32 Q_DECL_EXPORT QwtPlot_axisFont(LStrHandle _retVal, quintptr _instance, int32 axisId);
extern qint32 Q_DECL_EXPORT QwtPlot_setAxisScale(quintptr _instance, int32 axisId, double min, double max, double stepSize);
extern qint32 Q_DECL_EXPORT QwtPlot_setAxisScaleDraw(quintptr _instance, int32 axisId, quintptr scaleDraw);
extern qint32 Q_DECL_EXPORT QwtPlot_axisStepSize(double* _retVal, quintptr _instance, int32 axisId);
extern qint32 Q_DECL_EXPORT QwtPlot_axisScaleDraw(quintptr* _retVal, quintptr _instance, int32 axisId);
extern qint32 Q_DECL_EXPORT QwtPlot_setAxisLabelAlignment(quintptr _instance, int32 axisId, int32 alignment);
extern qint32 Q_DECL_EXPORT QwtPlot_setAxisLabelRotation(quintptr _instance, int32 axisId, double rotation);
extern qint32 Q_DECL_EXPORT QwtPlot_setAxisTitle(quintptr _instance, int32 axisId, LStrHandle title);
extern qint32 Q_DECL_EXPORT QwtPlot_axisTitle(LStrHandle _retVal, quintptr _instance, int32 axisId);
extern qint32 Q_DECL_EXPORT QwtPlot_setAxisMaxMinor(quintptr _instance, int32 axisId, qint32 maxMinor);
extern qint32 Q_DECL_EXPORT QwtPlot_axisMaxMinor(qint32* _retVal, quintptr _instance, int32 axisId);
extern qint32 Q_DECL_EXPORT QwtPlot_setAxisMaxMajor(quintptr _instance, int32 axisId, qint32 maxMajor);
extern qint32 Q_DECL_EXPORT QwtPlot_axisMaxMajor(qint32* _retVal, quintptr _instance, int32 axisId);
extern qint32 Q_DECL_EXPORT QwtPlot_replot(quintptr _instance);
extern qint32 Q_DECL_EXPORT LQwtPlotBarChart_LQwtPlotBarChart(quintptr* _retVal, LStrHandle title);
extern qint32 Q_DECL_EXPORT LQwtPlotBarChart_barFrameStyle(int32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT LQwtPlotBarChart_setBarFrameStyle(quintptr _instance, int32 style);
extern qint32 Q_DECL_EXPORT LQwtPlotBarChart_barFrameLineWidth(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT LQwtPlotBarChart_setBarFrameLineWidth(quintptr _instance, qint32 width);
extern qint32 Q_DECL_EXPORT LQwtPlotBarChart_barPalette(LStrHandle _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT LQwtPlotBarChart_setBarPalette(quintptr _instance, LStrHandle palette);
extern qint32 Q_DECL_EXPORT LQwtTextScaleDraw_LQwtTextScaleDraw(quintptr* _retVal, LVArray<LStrHandle>** labels);
extern qint32 Q_DECL_EXPORT LQwtTextScaleDraw_labels(LVArray<LStrHandle>** _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT LQwtTextScaleDraw_setLabels(quintptr _instance, LVArray<LStrHandle>** labels);
extern qint32 Q_DECL_EXPORT LQChart_LQChart(quintptr* _retVal, const char* _className, qint32 historyLength, double xMultiplier, quintptr parent);
extern qint32 Q_DECL_EXPORT LQChart_append(quintptr _instance, LVArray<double, 2>** values);
extern qint32 Q_DECL_EXPORT LQChart_axisTitle(LStrHandle _retVal, quintptr _instance, int32 axisId);
extern qint32 Q_DECL_EXPORT LQChart_clear(quintptr _instance);
extern qint32 Q_DECL_EXPORT LQChart_curveTitles(LVArray<LStrHandle>** _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT LQChart_historyLength(qint32* _retVal, quintptr _instance);
extern qint32 Q_DECL_EXPORT LQChart_isAxisAutoScaling(bool* _retVal, quintptr _instance, int32 axisId);
extern qint32 Q_DECL_EXPORT LQChart_setAxisAutoScaling(quintptr _instance, int32 axisId, bool* autoScaling);
extern qint32 Q_DECL_EXPORT LQChart_setAxisTitle(quintptr _instance, int32 axisId, LStrHandle title);
extern qint32 Q_DECL_EXPORT LQChart_setCurveTitles(quintptr _instance, LVArray<LStrHandle>** titles);
extern qint32 Q_DECL_EXPORT LQChart_setHistoryLength(quintptr _instance, qint32 length);
extern qint32 Q_DECL_EXPORT LQChart_setYAxisRange(quintptr _instance, double min, double max);

}

#endif // LQLIBINTERFACE_H
